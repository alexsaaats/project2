const strategies = [
  'root',
  'absolute',
  'relative'
]

/**
 *  Renders the sitemap as HTML.
 *
 *  @class HtmlRenderer
 */
class HtmlRenderer {

  /**
   *  Render the HTML format.
   *
   *  Unlike other formats this renderer does not return a `content` string as
   *  it modifies the template AST and marks the AST as dirty before updating
   *  the file content.
   *
   *  When no `builder` option is given the default `HtmlBuilder` class is used.
   *
   *  When the `strategy` option is given it should be one of `root`, `absolute`
   *  or `relative`. The default strategy `root` builds links with a leading
   *  slash, the `absolute` strategy uses the `base` URL to make links include
   *  the domain name and the `relative` strategy resolves links relative to
   *  the sitemap template file.
   *
   *  If an unsupported strategy is given the default is used.
   *
   *  @static {function} render
   *  @param {Object} context the processing context.
   *  @param {Object} sitemap raw sitemap data.
   *  @param {Object} options renderer options.
   *
   *  @option {String=root} strategy link href strategy.
   *  @option {String=#sitemap} selector query for the parent element.
   *  @option {Function} builder the HTML builder class.
   *
   *  @throws Error if the sitemap template could not be found.
   *  @throws Error if the parent element could not be found.
   *
   *  @returns an object with the sitemap ast.
   */
  static render (context, sitemap, options) {
    options.strategy = options.strategy || 'root'

    if (!~strategies.indexOf(options.strategy)) {
      options.strategy = 'root'
    }

    let tpl = context.graph.map[options.template]
    if (!tpl) {
      throw new Error(
        `sitemap html renderer requires a template file: ` +
        `${options.template} not found`)
    }

    const JsonRenderer = require('./json')
    const ast = JsonRenderer.parse(context, sitemap, options)
    let selector = options.selector || '#sitemap'
    let doc = tpl.ast
    let parent = doc.querySelector(selector)
    if (!parent) {
      throw new Error(
        `sitemap template does not contain an element ` +
        `that matches ${selector}`)
    }

    // set up builder class
    let Builder = options.builder || require('./builder')
    let builder = new Builder(context, sitemap, ast, tpl, options)
    builder.build(parent)

    // must mark the ast as dirty
    tpl.ast.dirty = true

    // update the file content
    tpl.file.update()

    return {ast: ast}
  }
}

module.exports = HtmlRenderer
